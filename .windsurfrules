# General Code Style & Formatting
- Follow the Airbnb Style Guide for code formatting.
- Use kebab-case for React component file names (e.g., user-card.tsx, not UserCard.tsx).
- Prefer named exports for components.

# Project Structure & Architecture
- Follow Next.js patterns and use the App Router.
- Correctly determine when to use server vs. client components in Next.js.
- Split components into client and server components only when necessary.

# Styling & UI
- Use Tailwind CSS for styling.
- Use HeroUI for components whenever possible.

# Backend & Database
- Use Supabase for all database operations.

# General Code Style & Formatting
- Always declare the type of each variable and function (parameters and return value).
- Use the type that best describes the data instead of importing types from 'react' or other libraries.
- Do not use type-only imports for React types.
- Avoid using any.
- Create necessary types.
- One export per file.

# Naming Conventions
- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.

# Functions & Logic
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.

# Data Handling
- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functionsâ€”use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.